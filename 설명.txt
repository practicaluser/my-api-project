cd C:\Users\Hope\Desktop\openSource\my-api-project
venv\Scripts\activate


과제 1.1: 기본 RESTful API 서버 
가짜 DB id, 제목, 내용
클라이언트에서 보내고 서버에서 처리
클래스 id, 제목, 내용
클라이언트에서 보낼 때는 id를 몰라도 보낼 수 있게끔해야 해서 생성과 수정을 위한 클래스 생성
생성은 무조건 제목과 내용이 들어가야 되고, 수정은 둘 중에 하나만 들어가도 된다.
저장된 데이터를 가져올 때는 Dict 형태, key와 value로 나누어짐


과제 1.2: 데이터베이스 스키마 설계 및 CRUD 구현
CREATE DATABASE mydatabase;
pip install sqlalchemy mysql-connector-python 대신에 pip install pymysql 사용

uvicorn app.main:app --reload 
-app.main → app 폴더 안의 main.py 모듈을 의미
--여기서 app 은 Python 패키지(app/ 디렉토리 + __init__.py 파일)
--main 은 그 안의 main.py 파일
-:app → main.py 안에 있는 FastAPI 인스턴스 객체 이름
--app = FastAPI()   # 👈 이 객체를 실행
--reload: 코드가 변경되면 서버를 자동으로 재시작

/api_server
├── main.py         # (수정) FastAPI 앱 실행 및 API 엔드포인트 로직
├── database.py     # (신규) 데이터베이스 연결 설정
├── models.py       # (신규) SQLAlchemy 데이터베이스 모델(테이블) 정의
└── schemas.py      # (신규) Pydantic 데이터 유효성 검사 모델 정의


데이터베이스 스키마 설계가 왜 중요한지 테스트



과제 1.3: 기초 API 단위/통합 테스트 작성
pip install pytest httpx



과제 2.1: SQL 기반 데이터 및 보안 로그 분석
FastAPI 애플리케이션을 한 번 실행(uvicorn app.main:app --reload)하면 models.Base.metadata.create_all(bind=engine) 코드에 의해 실제 DB에 access_logs와 security_events 테이블이 생성

pip install faker
python generate_logs.py

sql 쿼리 한 번에 실행하고 결과 보기
pip install pandas openpyxl
python run_analysis.py


MySQL 데이터베이스를 이미 사용하고 계신다면 my_database.db 파일은 전혀 필요 없으며, SQLite를 사용하실 이유가 없습니다. 
analysis_queries.sql 파일의 내용을 아래의 전체 코드로 교체해 주세요. SQLite 문법에 맞게 모두 수정한 버전입니다.


분석 결과 요약 보고서
위의 코드를 실행해서 나온 결과를 바탕으로 분석 결과 요약 보고서를 만드려고 하는데 첫번째 케이스는 


과제 2.2: 모듈형 API 테스트 자동화 프레임워크 구축


과제 2.3: CI/CD 입문: 코드 푸시 시 자동 테스트 실행
my-api-project/
├── app/
│   ├── ... (애플리케이션 파일)
├── scripts/              # 👈 [신규] 유틸리티 스크립트용 폴더
│   └── create_mock_data.py # 👈 여기에 위치
├── tests/
│   ├── __init__.py
│   ├── conftest.py
│   └── test_posts_api.py
└── pytest.ini



과제 2.4: 간단한 보안/운영 자동화 도구 개발
my-api-project/
├── app/
│   ├── services/             # 👈 [신규] 서비스 로직용 폴더
│   │   └── alerting.py       # 👈 여기에 위치
│   └── ... (main.py 등 다른 파일)
│   └── logger_config.py
├── scripts/
│   └── create_mock_data.py
├── tests/
│   ├── conftest.py
│   ├── test_alerting_simulation.py
│   └── ... (다른 테스트 파일)
└── ...



pytest -v -m "simulation"
평소에는 pytest -v -m "not simulation"으로 시뮬레이션을 제외한 모든 테스트를 빠르게 실행합니다.


pytest -v -m "simulation" --log-cli-level=INFO -s


과제 3.1: API 성능 벤치마킹 및 부하 테스트
pip install locust
pip freeze > requirements.txt 명령어를 실행하여 설치된 라이브러리 목록을 갱신
주의 pip freeze > requirements.txt 실행시 기존에 삭제한 pywin32==311 다시 적힘

my-api-project/
├── .github/
│   └── workflows/
│       └── python-ci.yml
├── app/
	└── main.py         # (수정) FastAPI 앱 실행 및 API 엔드포인트 로직
	└── database.py     # (신규) 데이터베이스 연결 설정
	└── models.py       # (신규) SQLAlchemy 데이터베이스 모델(테이블) 정의
	└── schemas.py      # (신규) Pydantic 데이터 유효성 검사 모델 정의
├── performance_tests/    # 👈 [신규] 부하 테스트 폴더
│   └── locustfile.py     # 👈 [신규] Locust 시나리오 파일
├── tests/
│   └── ... (기존 파일들)
├── requirements.txt      # (업데이트됨)
├── init_db.py
└── ...



```

---


이제 작성된 스크립트로 실제 부하를 발생시켜 보겠습니다.

1.  **API 서버 실행 (운영 모드)**
    먼저, Gunicorn을 사용하여 여러 워커로 API 서버를 실행합니다. 터미널을 새로 열고 프로젝트 루트에서 다음 명령어를 실행하세요.
    ```bash
    # 4개의 워커 프로세스로 Gunicorn 서버를 실행합니다.
    gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app
    ```

c


2.  **Locust 실행**
    또 다른 터미널을 열고, 프로젝트 루트에서 다음 명령어를 실행하여 Locust를 시작합니다.
    ```bash
    locust -f performance_tests/locustfile.py
    
http://localhost:8089


과제 3.2: 자동화된 웹 취약점 스캐닝

my-api-project/
├── .github/
│   └── workflows/
│       └── python-ci.yml       # CI/CD 자동화 워크플로우
├── app/
│   ├── __init__.py
│   ├── main.py                 # FastAPI 애플리케이션
│   ├── models.py               # SQLAlchemy DB 모델
│   ├── schemas.py              # Pydantic 데이터 스키마
│   └── database.py             # DB 연결 및 세션 관리
├── performance_tests/
│   └── locustfile.py           # Locust 부하 테스트 스크립트
├── scripts/
│   └── create_mock_data.py     # 분석용 모의 데이터 생성 스크립트
├── tests/
│   ├── __init__.py
│   ├── conftest.py             # Pytest 공용 Fixture 관리
│   ├── test_analysis_queries.py # 데이터 분석 쿼리 테스트
│   └── test_posts_api.py       # API 기능 테스트
├── .env                	# 환경 변수 
├── .gitignore                  # Git 추적 제외 파일
├── analysis_queries.sql        # 데이터 분석용 고급 SQL 쿼리
├── pytest.ini                  # Pytest 설정
└── requirements.txt            # Python 의존성 라이브러리