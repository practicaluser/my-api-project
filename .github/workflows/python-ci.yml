# .github/workflows/python-ci.yml

name: Python Test and Performance CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

  # # 👇 스케줄링 트리거
  # schedule:
  #   # cron 표현식: "매시간 0분에 실행" (UTC 기준)
  #   # 한국 시간(KST)으로는 매시간 59분이 아닌 정각(09:00, 10:00...)에 실행됩니다.
  #   - cron: '10 * * * *'

jobs:
  # 1. 기존 단위/통합 테스트 작업 (수정 없음)
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: mydatabase_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Pytest
        env:
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }}
          EMAIL_APP_PASSWORD: ${{ secrets.EMAIL_APP_PASSWORD }}
        run: |
          pytest -v -m "not simulation"
  # --- 👇 [신규] 성능 테스트 작업 추가 ---
  performance-test:
    # 'test' 작업이 성공해야만 이 작업이 실행됩니다.
    needs: test
    runs-on: ubuntu-latest

    services:
      # 성능 테스트용 DB도 동일하게 설정
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: mydatabase_test # 실제 DB 이름으로 변경 가능
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # --- 👇 [신규] DB 테이블 생성 단계 추가 ---
      - name: Create database tables
        run: python init_db.py

      # 6. Gunicorn으로 FastAPI 서버 실행 및 Locust 부하 테스트
      - name: Run FastAPI Server & Locust Performance Test
        run: |
          # Gunicorn을 백그라운드에서 실행 (&)
          gunicorn -w 2 -k uvicorn.workers.UvicornWorker app.main:app &
          sleep 5
          # reports 디렉토리 생성
          mkdir -p reports
          # Locust를 헤드리스 모드로 실행하여 부하 테스트 시작
          locust -f performance_tests/locustfile.py \
            --headless \
            --users 20 --spawn-rate 5 \
            --run-time 30s \
            --html reports/performance_report.html \
            --csv reports/performance_report
      # 7. 생성된 리포트를 아티팩트로 업로드
      - name: Upload Performance Report
        uses: actions/upload-artifact@v4
        with:
          name: locust-report
          path: reports/
