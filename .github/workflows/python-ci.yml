name: Python DevSecOps CI Pipeline

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =======================================================
  # Job 1: Static Analysis Quality Gate
  # =======================================================
  static-analysis:
    name: 1. Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' # Speed up dependency installation by caching

      - name: Install dependencies
        run: pip install black ruff safety

      - name: Check formatting with Black
        run: black --check .

      - name: Lint with Ruff
        run: ruff check .

      - name: Scan dependencies with Safety
        run: |
          pip install -r requirements.txt
          safety check -r requirements.txt

  # =======================================================
  # Job 2: Build & Integration Test Gate
  # =======================================================
  build-and-test:
    name: 2. Build and Integration Test
    needs: static-analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file for Docker Compose
        run: |
          echo "DATABASE_URL=mysql+pymysql://root:1234@db:3306/mydatabase_test" > .env
          echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> .env
          echo "RECEIVER_EMAIL=${{ secrets.RECEIVER_EMAIL }}" >> .env
          echo "EMAIL_APP_PASSWORD=${{ secrets.EMAIL_APP_PASSWORD }}" >> .env

      - name: Build and run containers with Docker Compose
        run: docker compose up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for the API server to be ready..."
          timeout 60s bash -c 'until curl -s http://localhost:8000/docs > /dev/null; do echo "Waiting..."; sleep 2; done'

      - name: Install test dependencies on runner
        run: |
          pip install -r requirements.txt
          # It's recommended to add pytest-json-report to your requirements.txt
          # but installing it here also works.
          pip install pytest-json-report

      - name: Run Pytest and Generate Report
        # --json-report flag generates the report file.
        run: pytest -v --json-report --json-report-file=pytest-report.json
        env:
          API_BASE_URL: 'http://localhost:8000'
        # Allows the workflow to continue even if tests fail, so we can upload the report.
        continue-on-error: true

      - name: Clean up containers
        # This step will always run, regardless of the test outcome.
        if: always()
        run: docker compose down

      - name: Upload QA Report Artifact
        # Uploads the generated JSON report as an artifact.
        if: always() # Ensures report is uploaded even on test failure.
        uses: actions/upload-artifact@v4
        with:
          name: qa-test-report # Artifact name
          path: pytest-report.json # Path to the file to upload

  # =======================================================
  # Job 3: Push to Registry
  # =======================================================
  push-to-registry:
    name: 3. Push Docker Image to GHCR
    needs: build-and-test
    # This job only runs on a push to the main branch.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permission to push to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
