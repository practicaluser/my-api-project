name: Python DevSecOps CI Pipeline

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  # =======================================================
  # 👇 [4.1] 수동 실행 트리거 추가 ---
  # =======================================================
  # 이제 GitHub Actions 탭에서 "Run workflow" 버튼으로 이 파이프라인을 수동 실행할 수 있습니다.
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =======================================================
  # Job 1, 2, 3 (기존 CI 잡들)
  # =======================================================
  # 이 잡들은 수동 실행 시에는 실행되지 않도록 조건을 추가합니다. (if: ...)
  static-analysis:
    name: 1. Static Analysis
    if: github.event_name != 'workflow_dispatch' # 수동 실행이 아닐 때만 실행
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (이하 내용은 기존과 동일) ...
      - name: Install dependencies
        run: pip install black ruff safety
      - name: Check formatting with Black
        run: black --check .
      - name: Lint with Ruff
        run: ruff check .
      - name: Scan dependencies with Safety
        run: |
          pip install -r requirements.txt
          safety check -r requirements.txt

  build-and-test:
    name: 2. Build and Integration Test
    if: github.event_name != 'workflow_dispatch' # 수동 실행이 아닐 때만 실행
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      # ... (기존 build-and-test 잡의 모든 스텝은 변경 없음) ...
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create .env file for Docker Compose
        run: |
          echo "DATABASE_URL=mysql+pymysql://root:1234@db:3306/mydatabase_test" > .env
      - name: Build and run containers with Docker Compose
        run: docker compose up -d --build
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for the API server to be ready..."
          timeout 60s bash -c 'until curl -s http://localhost:8088/docs > /dev/null; do echo "Waiting..."; sleep 2; done'
      - name: Install test dependencies
        run: pip install -r requirements.txt pytest pytest-json-report
      - name: Run Pytest and Generate Report
        run: pytest -v --json-report --json-report-file=pytest-report.json
        env:
          API_BASE_URL: 'http://localhost:8088'
        continue-on-error: true
      - name: Clean up containers
        if: always()
        run: docker compose down
      - name: Upload QA Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-test-report
          path: pytest-report.json

  push-to-registry:
    name: 3. Push Docker Image to GHCR
    if: github.event_name != 'workflow_dispatch' && github.event_name == 'push' && github.ref == 'refs/heads/main' # 수동 실행이 아닐 때만 실행
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # ... (기존 push-to-registry 잡의 모든 스텝은 변경 없음) ...
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # =======================================================
  # 👇 [4.1] 새로운 모의 침투 테스트 Job 추가 ---
  # =======================================================
  penetration-test:
    name: 4. ⚔️🛡️ Penetration Test (Manual)
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Create .env file for Test Environment
        run: |
          echo "DATABASE_URL=mysql+pymysql://root:1234@db:3306/mydatabase_test" > .env

      - name: Build and run test environment with Docker Compose
        # --wait 플래그를 추가하여 DB가 healthy 상태가 될 때까지 기다리도록 합니다.
        # 이렇게 하면 다음 단계에서 sleep을 사용할 필요가 없어 더 안정적입니다.
        run: docker compose up -d --build --wait

      - name: Wait for API to become available
        # 이 단계의 이름을 명확하게 변경합니다.
        # continue-on-error: true 를 추가하여, 이 단계가 실패해도 다음 디버깅 단계가 실행되도록 합니다.
        id: wait_for_api
        continue-on-error: true
        run: |
          echo "Waiting for the API server to be ready for attack..."
          timeout 60s bash -c 'until curl -s -f http://localhost:8088/posts > /dev/null; do echo "Waiting..."; sleep 2; done'

      # --- 👇 [핵심 수정] 실패 시 디버깅 로그를 출력하는 단계 추가 ---
      - name: Display Docker logs for debugging
        # 이전 단계(wait_for_api)가 실패했을 때만 이 단계를 실행합니다.
        if: steps.wait_for_api.outcome == 'failure'
        run: docker compose logs api
      # -----------------------------------------------------------

      - name: Run SQL Injection Attack & Verification Script
        # wait_for_api 단계가 성공했을 때만 이 스크립트를 실행합니다.
        if: steps.wait_for_api.outcome == 'success'
        run: python penetration_tests/run_sqli_attack_and_verify.py
        env:
          TARGET_URL: 'http://localhost:8088'
          DATABASE_URL: 'mysql+pymysql://root:1234@127.0.0.1:3306/mydatabase_test?charset=utf8mb4'

      - name: Clean up test environment
        if: always()
        run: docker compose down

      - name: Upload Penetration Test Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: penetration-test-report
          path: penetration_test_report.md
